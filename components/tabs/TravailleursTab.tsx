

import React, { useState, useCallback, useContext } from 'react';
import { Travailleur, ColumnDefinition, FormFieldConfig, User } from '../../types';
import { db } from '../../firebase';
import { collection, addDoc, doc, updateDoc, deleteDoc } from 'firebase/firestore';
import { DataContext } from '../DataContext';
import DataTable from '../DataTable';
import Modal from '../Modal';
import DataForm from '../DataForm';
import TabContentWrapper from '../TabContentWrapper';
import { formatDateForInput, logActivity } from '../../utils/helpers';
import { useToast } from '../ToastProvider';

// Props Interface remains the same, but the data source will change
interface TravailleursTabProps {
  currentUser: User;
}

const travailleurFormConfig: FormFieldConfig<Travailleur>[] = [
  { name: 'nom', label: 'Nom du travailleur', type: 'text', required: true, placeholder: 'Ex: Jeanne Dupont' },
  { 
    name: 'role', 
    label: 'Rôle', 
    type: 'select', 
    required: true, 
    options: [
      { value: 'Culture', label: 'Culture' },
      { value: 'Récolte', label: 'Récolte' },
      { value: 'Séchage', label: 'Séchage' },
      { value: 'Transformation', label: 'Transformation' },
      { value: 'Conditionnement', label: 'Conditionnement' },
      { value: 'Vente', label: 'Vente' },
      { value: 'Administration', label: 'Administration' },
      { value: 'Autre', label: 'Autre' },
    ],
    placeholder: 'Sélectionner rôle'
  },
  { name: 'tauxHoraire', label: 'Taux Horaire (CAD)', type: 'number', placeholder: 'Ex: 12.50', step: "0.01" },
  { name: 'contact', label: 'Contact (Email/Téléphone)', type: 'text', placeholder: 'Ex: email@example.com ou 06...' },
  { name: 'dateEmbauche', label: 'Date d\'embauche', type: 'date', required: true },
  { 
    name: 'statut', 
    label: 'Statut', 
    type: 'select', 
    options: [
      { value: 'Actif', label: 'Actif' },
      { value: 'Inactif', label: 'Inactif' },
    ], 
    required: true, 
    placeholder: 'Sélectionner statut'
  },
  { name: 'notes', label: 'Notes', type: 'textarea' },
];

const travailleurColumns: ColumnDefinition<Travailleur>[] = [
  { accessor: 'nom', Header: 'Nom' },
  { accessor: 'role', Header: 'Rôle' },
  { accessor: 'statut', Header: 'Statut' },
  { accessor: 'tauxHoraire', Header: 'Taux Horaire', cell: (item) => item.tauxHoraire ? `${item.tauxHoraire.toFixed(2)} CAD` : 'N/A' },
  { accessor: 'dateEmbauche', Header: 'Date Embauche', cell: (item) => formatDateForInput(item.dateEmbauche) },
];

const TravailleursTab: React.FC<TravailleursTabProps> = ({ currentUser }) => {
  // Consume data from the central DataContext
  const { allData } = useContext(DataContext);
  const travailleurs = allData.travailleursData;

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingTravailleur, setEditingTravailleur] = useState<Travailleur | undefined>(undefined);
  const [modalMode, setModalMode] = useState<'add' | 'edit' | 'clone'>('add');
  const { addToast } = useToast();

  const handleAddItem = useCallback(() => {
    setEditingTravailleur({
        id: '', // Will be generated by Firestore
        nom: '',
        role: 'Culture',
        statut: 'Actif',
        dateEmbauche: formatDateForInput(new Date().toISOString()),
    } as Travailleur);
    setModalMode('add');
    setIsModalOpen(true);
  }, []);

  const handleEditItem = useCallback((item: Travailleur) => {
    const itemToEdit = { ...item, dateEmbauche: formatDateForInput(item.dateEmbauche) };
    setEditingTravailleur(itemToEdit);
    setModalMode('edit');
    setIsModalOpen(true);
  }, []);

  const handleCloneItem = useCallback((item: Travailleur) => {
    const clonedItem = { 
      ...item, 
      id: '',
      nom: `${item.nom} (Copie)`,
      dateEmbauche: formatDateForInput(item.dateEmbauche)
    };
    setEditingTravailleur(clonedItem);
    setModalMode('clone');
    setIsModalOpen(true);
  }, []);

  const handleDeleteItem = async (id: string) => {
    const itemToDelete = travailleurs.find(w => w.id === id);
    try {
      await deleteDoc(doc(db, "travailleursData", id));
      addToast('Travailleur supprimé.', 'success');
      if (itemToDelete) {
        logActivity({ type: 'Travailleur', description: `Travailleur '${itemToDelete.nom}' supprimé.` }, currentUser);
      }
    } catch (error: any) {
      console.error("Error deleting document: ", { code: error.code, message: error.message });
      addToast('Erreur lors de la suppression.', 'error');
    }
  };

  const handleFormSubmit = async (data: Partial<Travailleur>) => {
    const isNew = modalMode === 'add' || modalMode === 'clone';
    
    // Remove the temporary 'id' field if it exists from cloning/adding
    const { id, ...travailleurData } = data;

    try {
      if (isNew) {
        await addDoc(collection(db, "travailleursData"), travailleurData);
        addToast('Travailleur ajouté.', 'success');
        logActivity({ type: 'Travailleur', description: `Nouveau travailleur '${data.nom}' ajouté.` }, currentUser);
      } else {
        if (!editingTravailleur?.id) {
          throw new Error("ID du travailleur manquant pour la modification.");
        }
        const docRef = doc(db, "travailleursData", editingTravailleur.id);
        await updateDoc(docRef, travailleurData);
        addToast('Travailleur modifié.', 'success');
        logActivity({ type: 'Travailleur', description: `Travailleur '${data.nom}' modifié.` }, currentUser);
      }
      setIsModalOpen(false);
      setEditingTravailleur(undefined);
    } catch (error: any) {
      console.error("Error saving document: ", { code: error.code, message: error.message });
      addToast('Erreur lors de la sauvegarde.', 'error');
    }
  };

  const getActiveFormConfig = () => {
    let config = [...travailleurFormConfig];
    if (modalMode !== 'add' && editingTravailleur) {
      config.unshift({ name: 'id', label: 'ID (Automatique)', type: 'text', disabled: true });
    }
    return config;
  }
  
  const getModalTitle = () => {
    if (modalMode === 'clone') return 'Cloner le Travailleur';
    return editingTravailleur && modalMode === 'edit' ? 'Modifier le Travailleur' : 'Ajouter un Travailleur';
  }

  return (
    <TabContentWrapper title="Gestion des Travailleurs" onAddItem={handleAddItem} addButtonLabel="Ajouter Travailleur">
      <DataTable 
        data={travailleurs} 
        columns={travailleurColumns} 
        onEdit={handleEditItem} 
        onDelete={handleDeleteItem}
        onClone={handleCloneItem} 
      />
      <Modal
        isOpen={isModalOpen}
        onClose={() => { setIsModalOpen(false); setEditingTravailleur(undefined); }}
        title={getModalTitle()}
      >
        <DataForm<Travailleur>
          formConfig={getActiveFormConfig()}
          initialData={editingTravailleur}
          onSubmit={handleFormSubmit}
          onCancel={() => { setIsModalOpen(false); setEditingTravailleur(undefined); }}
          isEditMode={modalMode !== 'add'}
          allData={allData}
        />
      </Modal>
    </TabContentWrapper>
  );
};

export default TravailleursTab;